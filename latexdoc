#!/bin/bash
function print_help {
	help_msg=$(cat $SCRIPT_DIR/help.txt)
	echo "$help_msg"
}
function vprint {
	if [ -z "$2" ]
	then
		echo "No message passed to vprint."
		exit 1
	elif [[ $1 = 1 ]]
	then
		echo "$2"
	fi
}
function throwerr {
	if [ ! -z "$2" ] && [ $1 -eq 0 ]
	then
		echo "$2"
	fi
	exit 1
}
# get script directory
SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
verbose=0
supressed=0
generate=0
compile=0
update=0
outfile=""
outdir=""
usetemplate=""
# verify that 1 arg exists
if [ -z "$1" ]
then
	print_help
	exit 0
fi
# check args (match help printout)
for i in "$@"
do
	case $i in
		# flags
		-c|--compile)
			vprint $verbose "Setting the --compile flag."
			compile=1
			;;
		-h|--help)
			vprint $verbose "Printing help."
			print_help
			exit 0
			;;
		-g|--generate)
			vprint $verbose "Setting the --generate flag."
			generate=1
			;;
		-s|--supress-errors)
			vprint $verbose "Setting the --supress-errors flag."
			supressed=1
			;;
		-u|--update)
			vprint $verbose "Setting the --update flag."
			update=1
			;;
		-v|--verbose)
			verbose=1
			;;
		# args
		-d=*|--output-dir=*)
			vprint $verbose "Setting the --output-dir arg."
			outdir="${i#*=}"
			;;
		-u=*|--use-template=*)
			vprint $verbose "Setting the --use-template arg."
			usetemplate="$SCRIPT_DIR/${i#*=}.latex"
			;;
		# outfile
		*)
			vprint $verbose "Attempting to set --outfile arg."
			if [ -z "$outfile" ]
			then
				outfile="$i"
			else
				throwerr $supressed "Filename already defined as "$outfile.latex", cannot specify twice."
			fi
			;;
	esac
done
if [ -z "$outfile" ]
then
	throwerr $supressed "Filename was never defined"
fi
filename="$outfile.latex"
pdfname="$outfile.pdf"
if [ -z "$outdir" ]
then
	outdir="$(dirname "$filename")"
	vprint $verbose "Setting --output-dir to default \"outdir\"."
fi
# include all action flags
# default to generate
if [ $compile -eq 0 ] && [ $generate -eq 0 ]
then
	vprint $verbose "No action defined, setting the --generate flag."
	generate=1
fi
if [ $generate -eq 1 ]
then
	# verify that file does not exist
	if [ -f "$filename" ]
	then
		throwerr $supressed "File exists."
		exit 1
	fi
	# generate template file
	vprint $verbose "Creating file \"$filename\"."
	contents="$(cat $SCRIPT_DIR/template.latex)"
	# remove placeholder
	contents="${contents/"[[DOCUMENT]]"/""}"
	touch "$filename"
	# append to file
	echo "$contents" >> "$filename"
	vprint $verbose "File created."
	exit 0
elif [ $compile -eq 1 ]
then
	# update
	if [ $update -eq 1 ]
	then
		# check for git command
		if ! command -v git &> /dev/null
		then
			throwerr $supressed "Command \"git\" could not be found."
		fi
		vprint $verbose "Updating submodules (packages)"
		git submodule update --init --recursive
	fi
	# check for latex command
	if ! command -v latex &> /dev/null
	then
		throwerr $supressed "Command \"latex\" could not be found."
	fi
	# check for texhash command
	if ! command -v texhash &> /dev/null
	then
		throwerr $supressed "Command \"texhash\" not found, you may need to install latex."
	fi
	# set custom latex package directories
	# empty dir at beginning (::) is on purpose
	export TEXINPUTS=::$SCRIPT_DIR/packages/listings-rust
	# initialize custom packages
	texhash
	if [ -z "$usetemplate" ]
	then
		vprint $verbose "Compiling file \"$filename\"."
		# compile the given latex file
		latex --output-dir="$outdir" --output-format=pdf "$filename" &&
			vprint $verbose "PDF compiled."
	else
		if [ ! -f "$usetemplate" ]
		then
			throwerr $supressed "Template \"$usetemplate\" does not exist."
		elif [ ! -f "$filename" ]
		then
			throwerr $supressed "File \"$filename\" does not exist."
		fi
		vprint $verbose "Inserting contents of \"$filename\" into \"$usetemplate\"."
		template="$(cat $usetemplate)"
		contents="$(cat $filename)"
		final="${template/"[[DOCUMENT]]"/$contents}"
		vprint $verbose "Saving final contents to temp file."
		tmp_name="${filename/"$outdir\/"/""}"
		tmp_name="tmp.$tmp_name"
		tmp_path="$outdir/$tmp_name"
		tmp_pdf_name="${pdfname/"$outdir\/"/""}"
		tmp_pdf_name="tmp.$tmp_pdf_name"
		tmp_pdf_path="$outdir/$tmp_pdf_name"
		if [ -f "$tmp_path" ] || [ -d "$tmp_path" ]
		then
			throwerr $supressed "Temporary file path \"$tmp_path\" already exists."
		fi
		vprint $verbose "Saving contents to temp file \"$tmp_path\"."
		echo "$final" > "$tmp_path"
		vprint $verbose "Compiling PDF from temp file."
		latex --output-dir="$outdir" --output-format=pdf "$tmp_path" &&
			vprint $verbose "PDF compiled."
		vprint $verbose "Removing temp file \"$tmp_name\"."
		rm "$tmp_path" &&
			vprint $verbose "Removed."
		vprint $verbose "Renaming PDF."
		mv "$tmp_pdf_path" "$pdfname" &&
			vprint $verbose "Complete."
	fi
fi
