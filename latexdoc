#!/bin/bash
function print_help {
	help_msg=$(cat $SCRIPT_DIR/help.txt)
	echo "$help_msg"
}
function vprint {
	if [ -z "$2" ]
	then
		echo "No message passed to vprint."
		exit 1
	elif [[ $1 = 1 ]]
	then
		echo "$2"
	fi
}
function throwerr {
	if [ ! -z "$2" ] && [ $1 -eq 0 ]
	then
		echo "$2"
	fi
	exit 1
}
# get script directory
SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
# flags
verbose=0
supressed=0
force=0
generate=0
compile=0
update=0
keepout=0
outfile=""
outdir=""
usetemplate=""
# verify that 1 arg exists
if [ -z "$1" ]
then
	print_help
	exit 0
fi
# check args (match help printout)
for i in "$@"
do
	case $i in
		# flags
		-c|--compile)
			vprint $verbose "Setting the --compile flag."
			compile=1
			;;
		-f|--force)
			vprint $verbose "Setting the --force flag."
			force=1
			;;
		-h|--help)
			vprint $verbose "Printing help."
			print_help
			exit 0
			;;
		-g|--generate)
			vprint $verbose "Setting the --generate flag."
			generate=1
			;;
		-k|--keep-outfile)
			vprint $verbose "Setting the --keep-outfile flag."
			keepout=1
			;;
		-s|--supress-errors)
			vprint $verbose "Setting the --supress-errors flag."
			supressed=1
			;;
		-p|--update)
			vprint $verbose "Setting the --update flag."
			update=1
			;;
		-v|--verbose)
			verbose=1
			;;
		# args
		-d=*|--output-dir=*)
			vprint $verbose "Setting the --output-dir arg."
			outdir="${i#*=}"
			;;
		-u=*|--use-template=*)
			vprint $verbose "Setting the --use-template arg."
			usetemplate="$SCRIPT_DIR/${i#*=}.latex"
			;;
		# outfile
		*)
			vprint $verbose "Attempting to set --outfile arg."
			if [ -z "$outfile" ]
			then
				outfile="$i"
			else
				throwerr $supressed "Filename already defined as "$outfile", cannot specify twice."
			fi
			;;
	esac
done
if [ -z "$outfile" ]
then
	throwerr $supressed "Filename was never defined"
fi
f_name="$outfile"
# include all action flags
# default to generate
if [ $compile -eq 0 ] && [ $generate -eq 0 ]
then
	vprint $verbose "No action defined, setting the --generate flag."
	generate=1
fi
if [ $generate -eq 1 ]
then
	# verify that file does not exist
	if [ -f "$f_name" ] && [ $force -eq 0 ]
	then
		throwerr $supressed "File exists."
		exit 1
	fi
	# generate template file
	vprint $verbose "Creating file \"$f_name\"."
	contents="$(cat $SCRIPT_DIR/template.latex)"
	# remove placeholder
	contents="${contents/"[[DOCUMENT]]"/""}"
	touch "$f_name"
	# append to file
	echo "$contents" >> "$f_name"
	vprint $verbose "File created."
	exit 0
elif [ $compile -eq 1 ]
then
	if [ ! -f "$f_name" ]
	then
		throwerr $supressed "File \"$f_name\" does not exist."
	fi
	f_base="${f_name%.*}"
	f_ext="${f_name##*.}"
	f_name_only="${f_name##*/}"
	f_name_short="${f_name_only/.$f_ext/}"
	f_full=$(readlink -f $f_name)
	pdfname="$f_base.pdf"
	if [ -z "$outdir" ]
	then
		outdir="${f_full/\/$f_name_only/}"
		vprint $verbose "Setting --output-dir to default \"$outdir\"."
	fi
	f_name_only="${f_full/$outdir\//}"
	tmp_full="$outdir/tmp.$f_name_only"
	tmp_pdf="$outdir/tmp.$f_name_short.pdf"
	# update
	if [ $update -eq 1 ]
	then
		# check for git command
		if ! command -v git &> /dev/null
		then
			throwerr $supressed "Command \"git\" could not be found."
		fi
		vprint $verbose "Updating submodules (packages)"
		git submodule update --init --recursive
	fi
	# check for latex command
	if ! command -v latex &> /dev/null
	then
		throwerr $supressed "Command \"latex\" could not be found."
	fi
	# check for texhash command
	if ! command -v texhash &> /dev/null
	then
		throwerr $supressed "Command \"texhash\" not found, you may need to install latex."
	fi
	# set custom latex package directories
	# empty dir at beginning (::) is on purpose
	export TEXINPUTS=::$SCRIPT_DIR/packages/listings-rust
	# initialize custom packages
	texhash
	if [ -z "$usetemplate" ]
	then
		vprint $verbose "Compiling file \"$f_full\"."
		# compile the given latex file
		latex --output-dir="$outdir" --output-format=pdf "$f_full" &&
			vprint $verbose "PDF compiled."
	else
		if [ ! -f "$usetemplate" ]
		then
			throwerr $supressed "Template \"$usetemplate\" does not exist."
		fi
		vprint $verbose "Inserting contents of \"$f_full\" into \"$usetemplate\"."
		template="$(cat $usetemplate)"
		contents="$(cat $f_full)"
		final="${template/"[[DOCUMENT]]"/$contents}"
		vprint $verbose "Saving final contents to temp file."
		# if $tmp_full is a directory and $force
		if [ $force -eq 1 ] && [ -d "$tmp_full" ]
		then
			throwerr $supressed "Cannot force; output file name is the same as \
				an existing directory."
		elif [ $force -eq 1 ] && [ -f "$tmp_full" ]
		then
			vprint $verbose "$tmp_full exists and will be overwritten."
		# if not force and $tmp_full is a file or directory
		elif [ $force -eq 0 ]
		then
			if [ -f "$tmp_full" ] || [ -d "$tmp_full" ]
			then
				throwerr $supressed "Temporary file path \"$tmp_full\" already exists."
			fi
		fi
		vprint $verbose "Saving contents to temp file \"$tmp_full\"."
		echo "$final" > "$tmp_full"
		vprint $verbose "Compiling PDF from temp file."
		latex --output-dir="$outdir" --output-format=pdf "$tmp_full" &&
			vprint $verbose "PDF compiled."
		# check keepout
		if [ $keepout -eq 0 ]
		then
			vprint $verbose "Removing temp file \"$tmp_full\"."
			rm "$tmp_full" &&
				vprint $verbose "Removed."
		else
			vprint $verbose "Keeping outfile \"$tmp_full\""
		fi
		vprint $verbose "Renaming PDF."
		mv "$tmp_pdf" "$pdfname" &&
			vprint $verbose "Complete."
	fi
fi
